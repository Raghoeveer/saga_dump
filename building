
import java.util.*;

class UserSolution {
    class Building {
        int address;
        int length;

        public Building(int address, int length) {
            this.address = address;
            this.length = length;
        }
    }

    class Space {
        int address;
        int length;

        public Space(int address, int length) {
            this.address = address;
            this.length = length;
        }

        // Needed for PriorityQueue.remove() to work properly
        @Override
        public boolean equals(Object obj) {
            if (this == obj) return true;
            if (obj == null || getClass() != obj.getClass()) return false;
            Space other = (Space) obj;
            return address == other.address && length == other.length;
        }

        @Override
        public int hashCode() {
            return Objects.hash(address, length);
        }
    }

    TreeMap<Integer, Space> spaceMap = new TreeMap<>();
    HashMap<Integer, Building> buildMap = new HashMap<>();
    PriorityQueue<Space> pq = new PriorityQueue<>((a, b) -> {
        if (a.length != b.length) return b.length - a.length;
        return a.address - b.address;
    });

    public void init(int N) {
        spaceMap.clear();
        buildMap.clear();
        pq.clear();
        Space initial = new Space(0, N);
        spaceMap.put(0, initial);
        pq.offer(initial);
    }

    public int build(int mLength) {
        while (!pq.isEmpty()) {
            Space unoccupied = pq.poll();
            // Skip stale entries
            if (!spaceMap.containsKey(unoccupied.address) ||
                spaceMap.get(unoccupied.address).length != unoccupied.length) {
                continue;
            }

            if (unoccupied.length < mLength) return -1;

            spaceMap.remove(unoccupied.address);

            int occStart = ((unoccupied.length - mLength) / 2) + unoccupied.address;
            Building occupied = new Building(occStart, mLength);
            buildMap.put(occStart, occupied);

            // Left segment
            if (occStart > unoccupied.address) {
                Space left = new Space(unoccupied.address, occStart - unoccupied.address);
                spaceMap.put(left.address, left);
                pq.offer(left);
            }

            // Right segment
            int rightStart = occStart + mLength;
            int rightLength = unoccupied.length - (mLength + (occStart - unoccupied.address));
            if (rightLength > 0) {
                Space right = new Space(rightStart, rightLength);
                spaceMap.put(right.address, right);
                pq.offer(right);
            }

            return occStart;
        }

        return -1;
    }

    public int demolish(int mAddr) {
        if (!buildMap.containsKey(mAddr)) return -1;

        Building occ = buildMap.remove(mAddr);
        int occStart = occ.address;
        int occEnd = occStart + occ.length;

        Integer leftKey = spaceMap.lowerKey(occStart);
        Integer rightKey = spaceMap.higherKey(occStart);

        Space left = (leftKey != null) ? spaceMap.get(leftKey) : null;
        Space right = (rightKey != null) ? spaceMap.get(rightKey) : null;

        boolean mergeLeft = (left != null && (left.address + left.length == occStart));
        boolean mergeRight = (right != null && (occEnd == right.address));

        if (mergeLeft && mergeRight) {
            // Merge with both
            pq.remove(left);
            pq.remove(right);
            spaceMap.remove(right.address);
            left.length += occ.length + right.length;
            pq.offer(left);
        } else if (mergeLeft) {
            // Merge with left
            pq.remove(left);
            left.length += occ.length;
            pq.offer(left);
        } else if (mergeRight) {
            // Merge with right
            pq.remove(right);
            spaceMap.remove(right.address);
            Space merged = new Space(occStart, occ.length + right.length);
            spaceMap.put(merged.address, merged);
            pq.offer(merged);
        } else {
            // No merge
            Space newSpace = new Space(occStart, occ.length);
            spaceMap.put(occStart, newSpace);
            pq.offer(newSpace);
        }

        return occ.length;
    }
}
