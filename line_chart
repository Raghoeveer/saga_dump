async def _generate_line_chart(self, nl_query: str, x_axis_label: str = "X-axis", y_axis_label: str = "Y-axis", title: str = "Line Chart", output_path: str = "line_chart.png"):
        """
        Generates a line chart from a DataFrame retrieved from the /get_df_multi endpoint and saves it to a file.

        Parameters:
        - nl_query: The natural language query to identify the DataFrame.
        - x_axis_label: Column name to use for x-axis (typically time or ordered category).
        - y_axis_label: Column name to use for y-axis (numerical).
        - title: Title of the chart.
        - output_path: File path to save the generated chart.
        """
        # Make a GET request to the /get_df_multi endpoint
        response = requests.get('http://localhost:5000/get_df_multi', params={"nl_query": nl_query})
        
        # Check if the response is successful
        if response.status_code != 200:
            logger.error(f"Failed to retrieve DataFrame: {response.status_code} - {response.text}")
            raise ValueError(f"Error retrieving DataFrame for query '{nl_query}'")

        data = response.json()
        df = pd.DataFrame(data)
        
        logger.info(f"Generating line chart")
        logger.info(f"title: {title}")
        logger.info(f"x_axis_label: {x_axis_label}")
        logger.info(f"y_axis_label: {y_axis_label}")
        logger.info(f"output_path: {output_path}")
        
        # Drop rows with NaN values in the specified columns
        df = df.dropna(subset=[x_axis_label, y_axis_label])
        
        # Check if the specified columns exist in the DataFrame
        if x_axis_label not in df.columns or y_axis_label not in df.columns:
            raise ValueError(f"Specified columns '{x_axis_label}' or '{y_axis_label}' not found in DataFrame.")
        
        logger.info(f"DataFrame columns: {df.columns}")
        
        # Generate the line chart
        plt.figure(figsize=(10, 6))
        plt.plot(df[x_axis_label], df[y_axis_label], marker='o', color='royalblue', linewidth=2)
        plt.xlabel(x_axis_label)
        plt.ylabel(y_axis_label)
        plt.title(title)
        plt.xticks(rotation=45, ha='right')
        plt.grid(True, linestyle='--', alpha=0.7)
        plt.tight_layout()

        # Save the chart to the specified output path
        plt.savefig(output_path)
        plt.close()
        print(f"Line chart saved to {output_path}")



