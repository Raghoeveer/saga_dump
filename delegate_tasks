async def _delegate_task_batch(
    self,
    tasks_json: str
) -> dict[str, str]:
    """
    A2A tool: parses a JSON string of tasks and asynchronously delegates them to the appropriate agents.

    Args:
        tasks_json (str): A JSON string representing a list of tasks. 
                          Each task must contain:
                            - "agent": agent name
                            - "message": str or dict
                            - "tool_context": dict with a state key

    Returns:
        dict[str, str]: Mapping from agent+session_id to the agent's response
    """

    try:
        task_list = json.loads(tasks_json)
    except Exception as e:
        raise ValueError(f"Invalid JSON input: {e}")

    async def run_single_task(task: dict) -> tuple[str, str]:
        agent_name = task["agent"]
        message = task["message"]
        tool_context_raw = task["tool_context"]

        # Build ToolContext object
        tool_context = ToolContext(state=tool_context_raw.get("state", {}))

        # Ensure agent is known
        if agent_name not in self.connectors:
            return (f"{agent_name}:unknown", f"[ERROR: Unknown agent '{agent_name}']")

        # Create session ID if missing
        if "session_id" not in tool_context.state:
            tool_context.state["session_id"] = str(uuid.uuid4())
        session_id = tool_context.state["session_id"]

        # Convert dict message to JSON string
        if isinstance(message, dict):
            message = json.dumps(message)

        try:
            task_result = await self.connectors[agent_name].send_task(message, session_id)
            if task_result.history and len(task_result.history) > 1:
                return (f"{agent_name}:{session_id}", task_result.history[-1].parts[0].text)
            return (f"{agent_name}:{session_id}", "")
        except Exception as e:
            return (f"{agent_name}:{session_id}", f"[ERROR: {str(e)}]")

    # Run all tasks concurrently
    results = await asyncio.gather(*(run_single_task(task) for task in task_list))




async def _delegate_task_batch(
    self,
    agent_name: str,
    tool_context: ToolContext,
    tasks_json: str
) -> dict[str, str]:
    """
    A2A tool: asynchronously sends a list of messages (JSON string) to the same agent.

    Args:
        agent_name (str): The name of the target agent.
        tool_context (ToolContext): Shared session context across all tasks.
        tasks_json (str): A JSON string representing a list of messages (each str or dict).

    Returns:
        dict[str, str]: A mapping from message index to the agent's response.
    """

    try:
        message_list = json.loads(tasks_json)
    except Exception as e:
        raise ValueError(f"Invalid JSON input: {e}")

    # Ensure agent exists
    if agent_name not in self.connectors:
        raise ValueError(f"Unknown agent: {agent_name}")

    # Ensure session_id exists
    if "session_id" not in tool_context.state:
        tool_context.state["session_id"] = str(uuid.uuid4())
    session_id = tool_context.state["session_id"]

    async def send_message(index: int, message: str | dict) -> tuple[str, str]:
        try:
            # Convert dict to string if needed
            if isinstance(message, dict):
                message = json.dumps(message)

            task_result = await self.connectors[agent_name].send_task(message, session_id)

            if task_result.history and len(task_result.history) > 1:
                reply = task_result.history[-1].parts[0].text
            else:
                reply = ""

            return (str(index), reply)

        except Exception as e:
            return (str(index), f"[ERROR: {str(e)}]")

    # Run all messages concurrently
    results = await asyncio.gather(*(
        send_message(i, msg) for i, msg in enumerate(message_list)
    ))

    return dict(results)



    return dict(results)
