You are a query classification agent. Your job is to determine whether the user's natural language query involves **multi-query structured analysis** based on a **Top-K category filter**.

These are queries that apply **further analysis (trend, aggregation, distribution, search, etc.) on each value in the Top-K list of some dimension** (like countries, capsules, languages, etc.).

---

### You should classify the query as `is_multi_query = true` **only if**:

It involves **two levels of logic**:
1. **Top-K Category Selection**: Select the top K values of a category (e.g., top 5 countries, top 10 capsules, top 3 languages), usually using `GROUP BY` + `ORDER BY COUNT(*)` or a similar aggregate.
2. **Per-Top-K Subquery**: Perform any of the following **for each** Top-K category value:
   - Aggregation (COUNT, AVG, SUM, etc.)
   - Trend analysis (grouped by date)
   - Distribution across a subcategory
   - Search / filtering / ranking
   - Big number summary
   - Top N per K
   - Any sub-analytics requiring GROUP BY per Top-K category

---

### Common Examples:

- “Show top 5 utterances for the top 10 countries.” → ✅ `top_n_per_top_k`
- “Give trend of utterance count for top 5 capsules.” → ✅ `trend_per_top_k`
- “Show average latency per hour for top 5 client types.” → ✅ `metric_per_top_k`
- “Give count of users per capsule for top 3 locales.” → ✅ `distribution_per_top_k`
- “Fetch 50 utterances for top 5 capsules.” → ✅ `search_per_top_k`
- “Show total utterances for top 10 countries.” → ✅ `big_number_per_top_k`

---

### Classification Output Format:

Respond in JSON format as below:

```json
{
  "is_multi_query": true | false,
  "multi_query_type": "top_n_per_top_k" | "trend_per_top_k" | "distribution_per_top_k" | "search_per_top_k" | "big_number_per_top_k" | "metric_per_top_k" | null,
  "top_k_category": "<category being used for Top-K, e.g., country, capsuleid, etc.>",
  "reasoning": "<brief explanation of classification logic>"
}


SELECT AVG(SAFE_CAST(e2e AS FLOAT64)) AS avg_e2e FROM `{TABLE_NAME}` WHERE country IN ('IN', 'KR') AND yyyymmdd >= '20230301'

async def get_trend_examples(self):
        return f"""
            1. Big query provides the trend of utterances for India, showing the number of utterances per day 
                - SELECT yyyymmdd AS date, COUNT(*) AS utterances FROM `{TABLE_NAME}` 
                WHERE country = 'IN' GROUP BY date ORDER BY date
            2. Big query provides a comparison of the average latency trends for India and Korea.
                - SELECT yyyymmdd AS date, AVG(SAFE_CAST(e2e AS FLOAT64)) AS latency FROM `{TABLE_NAME}` WHERE country IN ('IN', 'KR') GROUP BY date ORDER BY date
            3. Big query provides a hourly active users
                - SELECT local_hour as hour, COUNT(DISTINCT hashed_userid) as users from `{TABLE_NAME}`
            4. Big query compares the trend of daily active users for mobile and visual device data across different English locales
                - SELECT yyyymmdd, clienttype, language, COUNT(DISTINCT hashed_userid) as DAU FROM `{TABLE_NAME}` WHERE clienttype IN ('bixby-mobile', 'bixby-tv') AND language IN ('en-IN', 'en-US', 'en-GB') GROUP BY yyyymmdd, clienttype, language ORDER BY yyyymmdd, clienttype, language
            5. Big query compares the global usage trend of all Bixby products by counting the number of utterances per day for each client type.
                - SELECT yyyymmdd AS date, COUNT(*) AS utterances, clienttype FROM `{TABLE_NAME}` WHERE clienttype IN ('bixby-mobile', 'bixby-watch', 'bixby-tv', 'bixby-fridge') GROUP BY date, clienttype ORDER BY date
            6. Big query returns the average e2e latency for Samsung Bixby in India and Korea for the last 60 days
                - SELECT AVG(SAFE_CAST(e2e AS FLOAT64)) as avg_e2e FROM `{TABLE_NAME}` WHERE country IN ('IN', 'KR') AND  PARSE_DATE('%Y%m%d', yyyymmdd) >= DATE_SUB(PARSE_DATE('%Y%m%d','20230501'), INTERVAL 60 DAY)
            7. Big query returns the trend of e2e latency for Samsung Bixby in India and Korea
                - SELECT country, yyyymmdd, ROUND(AVG(SAFE_CAST(e2e AS FLOAT64))) as avg_e2e_latency FROM `{TABLE_NAME}` WHERE (country = 'IN' OR country = 'KR') GROUP BY country, yyyymmdd ORDER BY yyyymmdd
            8. Big query returns the compares the trend of daily active users for the top 5 capsules on Bixby Mobile
                - SELECT yyyymmdd, capsuleid, COUNT(DISTINCT hashed_userid) as DAU FROM `bixby2-analytics-dev.srib.llm_poc2` WHERE clienttype = 'bixby-mobile' and where capsuleid in (select capsuleid, count(*) as count from `bixby2-analytics-dev.srib.llm_poc2` where clienttype='bixby-mobile' GROUP BY capsuleid ORDER BY count desc LIMIT 5) GROUP BY yyyymmdd, capsuleid
            
            Note for trend creation:
            * You have to use 'GROUP BY'. Example:
            i) SELECT nltext, COUNT(*) as count FROM `bixby2-analytics-dev.srib.llm_poc2` WHERE clienttype = 'bixby-mobile' GROUP BY nltext  
            ii) SELECT yyyymmdd, capsuleid, COUNT(DISTINCT hashed_userid) as DAU FROM `bixby2-analytics-dev.srib.llm_poc2` WHERE clienttype = 'bixby-mobile' and where capsuleid in (select capsuleid, count(*) as count from `bixby2-analytics-dev.srib.llm_poc2` where clienttype='bixby-mobile' GROUP BY capsuleid ORDER BY count desc LIMIT 5) GROUP BY yyyymmdd, capsuleid
            """



    async def get_big_number_examples(self):
        return f"""
            1. Big query returns the total number of unique capsules used in the Bixby voice assistant
                - SELECT COUNT(DISTINCT capsuleid) FROM `{TABLE_NAME}`
            2. Big query calculates the number of active users in India from May 1, 2023 to June 10, 2023
                - SELECT COUNT(DISTINCT hashed_userid) as active_users FROM `{TABLE_NAME}` WHERE country = 'IN' AND yyyymmdd BETWEEN '20230501' AND '20230610'
            3. Big query returns the total count of utterances in the last "3" month
                - SELECT COUNT(*) FROM `{TABLE_NAME}` WHERE  PARSE_DATE('%Y%m%d', yyyymmdd) >= DATE_SUB( PARSE_DATE('%Y%m%d','20230501'), INTERVAL 3 MONTH)
            4. Big query returns the count of users who use Bixby at least three times every day
                - SELECT COUNT(DISTINCT hashed_userid) as user_count FROM (SELECT hashed_userid, COUNT(*) as utterance_count FROM `{TABLE_NAME}` GROUP BY hashed_userid, yyyymmdd HAVING utterance_count >= 3)
            5. Big query returns the total count of utterances in the last "2" weeks for core capsule
                - SELECT COUNT(*) FROM `{TABLE_NAME}` WHERE  PARSE_DATE('%Y%m%d', yyyymmdd) >= DATE_SUB( PARSE_DATE('%Y%m%d','20230501'), INTERVAL 2 WEEK) and capsuleid='viv.core'
            6. Big query returns the total count of utterances in the last "10" days for client bixby tv
                - SELECT COUNT(*) FROM `{TABLE_NAME}` WHERE  PARSE_DATE('%Y%m%d', yyyymmdd) >= DATE_SUB( PARSE_DATE('%Y%m%d','20230501'), INTERVAL 10 DAY) and clienttype='bixby-tv'
            7. Big query returns Total number of capsules
                - SELECT COUNT(DISTINCT capsuleid) FROM `{TABLE_NAME}`"""

    async def get_topn_examples(self):
        return f"""
            1. Big query for getting the count of top 50 non-gibberish failed utterances
                - SELECT nltext, COUNT(*) as count FROM `{TABLE_NAME}` WHERE isgibberish = 'false' AND feedback_label = '0' GROUP BY nltext ORDER BY count DESC LIMIT 50
            2. Big query retrieves the top 10 negative NLG responses based on feedback label
                - SELECT messagespeech, COUNT(*) as count FROM `{TABLE_NAME}` WHERE feedback_label = '0' GROUP BY messagespeech ORDER BY count DESC LIMIT 10
            3. Big query returns the top 5 client types along with the number of records for each client type from the given date range
                - SELECT clienttype, COUNT(*) as count FROM `{TABLE_NAME}` GROUP BY clienttype ORDER BY count DESC LIMIT 5
            4. Big Query returns top 10 nltext and its total count.
                - SELECT nltext, COUNT(*) as count FROM `{TABLE_NAME}` group by nltext ORDER BY nltext ASC LIMIT 10
            5. Big Query returns least 10 nltext and its total count.
                - SELECT nltext, COUNT(*) as count FROM `{TABLE_NAME}` group by nltext ORDER BY nltext DESC LIMIT 10
            
            Important Note:- Fetch at least 100 records in big query. Example: LIMIT 100"""

    async def get_numerical_graph_distribution_examples(self):
        return f"""
            1. Big query returns the average e2e latency for Samsung Bixby in India and Korea
                - SELECT country, ROUND(AVG(SAFE_CAST(e2e AS FLOAT64))) as avg_e2e_latency FROM `{TABLE_NAME}` WHERE (country = 'IN' OR country = 'KR')  GROUP BY country
            2. Big query returns the count of unique user utterances in India and capsule is "viv.core" for english locale
                - SELECT DISTINCT nltext, COUNT(*) as count FROM `{TABLE_NAME}` WHERE country = 'IN' AND capsuleid='viv.core' and language LIKE 'en-%' GROUP BY nltext ORDER BY count DESC"""

    async def get_search_results_examples(self):
        return f"""
            1. Big query for utterances containing "bixby" along with client type and capsuleid
                - SELECT nltext, clienttype, capsuleid FROM `{TABLE_NAME}` WHERE LOWER(nltext) LIKE '%bixby%' LIMIT 100
            2. Big query for whose capsule is "viv.core" for english locale
                - SELECT * FROM `{TABLE_NAME}` WHERE capsuleid='viv.core' and language LIKE 'en-%' LIMIT 100
            3. Big query for user utterances for Bixby TV and capsule viv.core for last 10 days
                - SELECT * FROM `{TABLE_NAME}` WHERE capsuleid='viv.core' and clienttype='bixby-tv' and PARSE_DATE('%Y%m%d', yyyymmdd) >= DATE_SUB( PARSE_DATE('%Y%m%d','20230501'), INTERVAL 10 DAY) LIMIT 100
            
            Important Note:- 
            * Limit to 100 records in big query, if user does not ask for records count. Example: LIMIT 100
            * Do not give total count in result. Example: Count(*)
            * If user does not asks for any column to display then use yyyymmdd, nltext, language, country, clienttype, messagespeech, capsuleid, goal, launchmethod columns in same order given. Example: SELECT yyyymmdd, nltext, language, country, clienttype, messagespeech, capsuleid, goal, launchmethod from"""
    
    
    async def get_distribution_examples(self):
        return f"""
            1. BigQuery shows the distribution of utterances country-wise.
                - SELECT country, COUNT(*) as count FROM `{TABLE_NAME}` GROUP BY country ORDER BY count DESC

            2. BigQuery shows the distribution of utterances country-wise *for the chat capsule*.
                - SELECT country, COUNT(*) as count FROM `{TABLE_NAME}` WHERE capsuleid LIKE '%chat%' GROUP BY country ORDER BY count DESC

            3. BigQuery shows the capsule-wise usage distribution for each locale.
                - SELECT language, capsuleid, COUNT(*) as count FROM `{TABLE_NAME}` GROUP BY language, capsuleid ORDER BY language, count DESC

            4. BigQuery compares locale-wise usage distribution across each launch method.
                - SELECT language, launchmethod, COUNT(*) as count FROM `{TABLE_NAME}` GROUP BY language, launchmethod ORDER BY language, count DESC

            5. BigQuery compares locale-wise usage distribution for each launch method *for Indian utterances only*.
                - SELECT language, launchmethod, COUNT(*) as count FROM `{TABLE_NAME}` WHERE country = 'IN' GROUP BY language, launchmethod ORDER BY language, count DESC

            6. BigQuery shows country-wise distribution of user count for the Spotify capsule.
                - SELECT country, COUNT(DISTINCT conversationid) as user_count FROM `{TABLE_NAME}` WHERE capsuleid LIKE '%spotify%' GROUP BY country ORDER BY user_count DESC

            7. BigQuery shows country-wise distribution of device count for the Spotify capsule.
                - SELECT country, COUNT(DISTINCT clienttype) as device_count FROM `{TABLE_NAME}` WHERE capsuleid LIKE '%spotify%' GROUP BY country ORDER BY device_count DESC
        """
