import requests
import pandas as pd
import matplotlib.pyplot as plt
import logging
import os

logger = logging.getLogger(__name__)

async def _generate_table_plot(
    self,
    nl_query: str,
    columns: list[str],
    output_path: str = "table_plot.png"
) -> str:
    """
    Generates and saves a single table plot based on a list of selected columns from a DataFrame.

    Parameters:
    - nl_query: The natural language query to retrieve the DataFrame.
    - columns: List of column names to include in the table.
    - output_path: File path where the image will be saved.

    Returns:
    - The path to the saved image.
    """
    # Request the DataFrame
    response = requests.get('http://localhost:5000/get_df_multi', params={"nl_query": nl_query})
    if response.status_code != 200:
        logger.error(f"Failed to retrieve DataFrame: {response.status_code} - {response.text}")
        raise ValueError(f"Error retrieving DataFrame for query '{nl_query}'")

    data = response.json()
    df = pd.DataFrame(data)
    logger.info(f"Retrieved DataFrame with columns: {df.columns.tolist()}")

    # Validate and extract selected columns
    missing = [col for col in columns if col not in df.columns]
    if missing:
        raise ValueError(f"Columns not found in DataFrame: {missing}")

    sub_df = df[columns].dropna(how="all")

    # Plot the table
    fig, ax = plt.subplots(figsize=(min(12, 1.2 * len(columns)), min(10, 0.5 * len(sub_df) + 1)))
    ax.axis('off')
    table = ax.table(
        cellText=sub_df.values,
        colLabels=sub_df.columns,
        cellLoc='center',
        loc='center'
    )
    table.auto_set_font_size(False)
    table.set_fontsize(10)
    table.scale(1.2, 1.2)

    # Save to file
    os.makedirs(os.path.dirname(output_path), exist_ok=True)
    plt.savefig(output_path, bbox_inches='tight')
    plt.close()

    logger.info(f"Table plot saved to: {output_path}")
    return output_path



async def _generate_big_number(self, nl_query: str, value_column: str = "value", label: str = "Metric", output_path: str = "big_number.png"):
    """
    Generates a big number visualization from a DataFrame retrieved via the /get_df_multi endpoint.

    Parameters:
    - nl_query: Natural language query to identify the DataFrame.
    - value_column: Name of the column containing the metric value.
    - label: Descriptive label to display below the number.
    - output_path: File path to save the generated chart.
    """
    # Fetch data
    response = requests.get('http://localhost:5000/get_df_multi', params={"nl_query": nl_query})

    if response.status_code != 200:
        logger.error(f"Failed to retrieve DataFrame: {response.status_code} - {response.text}")
        raise ValueError(f"Error retrieving DataFrame for query '{nl_query}'")

    data = response.json()
    df = pd.DataFrame(data)

    # Validate value column
    if value_column not in df.columns:
        raise ValueError(f"Specified column '{value_column}' not found in DataFrame.")

    if df.empty or df.shape[0] < 1:
        raise ValueError("Insufficient data to generate big number visualization.")

    # Extract current and previous values (last two rows)
    df = df.dropna(subset=[value_column])
    df = df.sort_values(by=df.columns[0])  # sort by time or first column if needed

    current_value = df[value_column].iloc[-1]
    previous_value = df[value_column].iloc[-2] if len(df) > 1 else None

    # Calculate change
    if previous_value is not None and previous_value != 0:
        change = ((current_value - previous_value) / previous_value) * 100
    else:
        change = None

    logger.info(f"Current value: {current_value}")
    logger.info(f"Previous value: {previous_value}")
    logger.info(f"Change: {change}")

    # Create plot
    fig, ax = plt.subplots(figsize=(6, 4))
    fig.patch.set_facecolor('#F7F7F7')
    ax.axis('off')

    # Big number
    ax.text(0.5, 0.6, f"{current_value:,.0f}", fontsize=40, ha='center', color='black', fontweight='bold')

    # Change indicator
    if change is not None:
        arrow = '↑' if change >= 0 else '↓'
        color = 'green' if change >= 0 else 'red'
        sign = '+' if change >= 0 else ''
        ax.text(0.5, 0.35, f"{arrow} {sign}{abs(change):.1f}%", fontsize=20, ha='center', color=color)
    
    # Label
    ax.text(0.5, 0.15, label, fontsize=12, ha='center', color='gray')

    plt.tight_layout()
    plt.savefig(output_path)
    plt.close()
    logger.info(f"Big number visualization saved to {output_path}")


async def _generate_line_chart(self, nl_query: str, x_axis_label: str = "X-axis", y_axis_label: str = "Y-axis", title: str = "Line Chart", output_path: str = "line_chart.png"):
        """
        Generates a line chart from a DataFrame retrieved from the /get_df_multi endpoint and saves it to a file.

        Parameters:
        - nl_query: The natural language query to identify the DataFrame.
        - x_axis_label: Column name to use for x-axis (typically time or ordered category).
        - y_axis_label: Column name to use for y-axis (numerical).
        - title: Title of the chart.
        - output_path: File path to save the generated chart.
        """
        # Make a GET request to the /get_df_multi endpoint
        response = requests.get('http://localhost:5000/get_df_multi', params={"nl_query": nl_query})
        
        # Check if the response is successful
        if response.status_code != 200:
            logger.error(f"Failed to retrieve DataFrame: {response.status_code} - {response.text}")
            raise ValueError(f"Error retrieving DataFrame for query '{nl_query}'")

        data = response.json()
        df = pd.DataFrame(data)
        
        logger.info(f"Generating line chart")
        logger.info(f"title: {title}")
        logger.info(f"x_axis_label: {x_axis_label}")
        logger.info(f"y_axis_label: {y_axis_label}")
        logger.info(f"output_path: {output_path}")
        
        # Drop rows with NaN values in the specified columns
        df = df.dropna(subset=[x_axis_label, y_axis_label])
        
        # Check if the specified columns exist in the DataFrame
        if x_axis_label not in df.columns or y_axis_label not in df.columns:
            raise ValueError(f"Specified columns '{x_axis_label}' or '{y_axis_label}' not found in DataFrame.")
        
        logger.info(f"DataFrame columns: {df.columns}")
        
        # Generate the line chart
        plt.figure(figsize=(10, 6))
        plt.plot(df[x_axis_label], df[y_axis_label], marker='o', color='royalblue', linewidth=2)
        plt.xlabel(x_axis_label)
        plt.ylabel(y_axis_label)
        plt.title(title)
        plt.xticks(rotation=45, ha='right')
        plt.grid(True, linestyle='--', alpha=0.7)
        plt.tight_layout()

        # Save the chart to the specified output path
        plt.savefig(output_path)
        plt.close()
        print(f"Line chart saved to {output_path}")
