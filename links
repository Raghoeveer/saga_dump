import json
import uuid
import asyncio
from typing import Union

async def _delegate_task_batch(
    self,
    agent_name: str,
    tool_context: ToolContext,
    tasks_json: str
) -> str:
    """
    A2A tool: asynchronously sends a list of messages (JSON string) to the same agent.

    Args:
        agent_name (str): The name of the target agent.
        tool_context (ToolContext): Shared session context across all tasks.
        tasks_json (str): A JSON string representing a list of messages (each str or dict).

    Returns:
        str: A JSON-formatted string list of all agent responses.
    """

    try:
        message_list = json.loads(tasks_json)
    except Exception as e:
        raise ValueError(f"Invalid JSON input: {e}")

    if agent_name not in self.connectors:
        raise ValueError(f"Unknown agent: {agent_name}")

    # Ensure session_id exists
    if "session_id" not in tool_context.state:
        tool_context.state["session_id"] = str(uuid.uuid4())
    session_id = tool_context.state["session_id"]

    async def send_message(message: Union[str, dict]) -> Union[str, dict]:
        try:
            if isinstance(message, dict):
                message = json.dumps(message)

            task_result = await self.connectors[agent_name].send_task(message, session_id)

            if task_result.history and len(task_result.history) > 1:
                reply = task_result.history[-1].parts[0].text
                try:
                    return json.loads(reply)
                except Exception:
                    return reply  # fallback: return as string if not JSON
            return ""

        except Exception as e:
            return {"error": str(e)}

    results = await asyncio.gather(*(send_message(msg) for msg in message_list))

    return json.dumps(results)


{
    {
        "NL_query": "Show the daily trend of utterance counts for Bixby TV over the last 12 months using the `yyyymmdd` field.",
        "feature": "Dashboard",
        "subfeature": "Trend"
    },
    {
        "NL_query": "Analyze the distribution of Bixby TV utterances across different `language` codes (e.g., `en-US`, `ko-KR`, etc.).",
        "feature": "Dashboard",
        "subfeature": "Distribution"
    },
    {
        "NL_query": "Identify the top 5 `country` codes by the count of utterances containing \"Bixby TV\".",
        "feature": "Dashboard",
        "subfeature": "Top N"
    }
}

